{
  "title": "Chapter 4 - OO Modeling with UMLÂ ",
  "cells": [
    {
      "type": "markdown",
      "data": "### View of a Software System\n#### Static View\n+ Entity that exists in the real world\n+ Have identity and are differentiated from each other\n\n*Associations:*\n\n![Captura de pantalla 2017-11-12 a las 20.29.51.png](quiver-image-url/DD6FB4B1AF604F738D0B9FF91927867D.png =408x166)\n\n![Captura de pantalla 2017-11-12 a las 20.30.17.png](quiver-image-url/FE5CF203147D109A25B936072B4DD054.png =577x303)\n\n#### Dynamic View\n+ Objects communicate by means of invocation of operations on other objects\n+ Describes the aspects of a system that change over time:\n    + Interaction between objects\n    + Possible states of an object\n    + Transitions between states\n    + What events are produced\n    + What operations are executed\n\n![Captura de pantalla 2017-11-12 a las 20.32.20.png](quiver-image-url/6EFA0DBDC5F49DBD70A6667083072317.png =472x327)\n\n![Captura de pantalla 2017-11-12 a las 20.33.20.png](quiver-image-url/482C6EE2B7BAD4F6F5FCAD2F266AB1AF.png =588x410)\n\n---\n\n### OO Methods\n+ OO Analysis:\n    + A specification of the problem is created\n    + Describes what the system must do\n+ OO Design:\n    + Definition of a software solution to satisfy the requirements\n    + Describes how the system will work\n\n---\n\n### The UML Language\n> UML = Unified Modeling Language\n\n+ A general purpose language for OO modelling\n+ Starting Point:\n    + Many OO methods with different notations\n    + Learning and tool construction inconvenients\n    + A uniform notation needed\n\n> UML is not a method, it is a notation to describe systems\n\n![Captura de pantalla 2017-11-12 a las 20.40.44.png](quiver-image-url/25AE1047F2140B02AE32B1FFB308A3B9.png =578x413)\n\n#### Use Case Model\nUse cases is a technique to capture info about how a system or business presently works and how it is required to work in the future. They are used during requirements gathering to capture functional requirements of a system to be developed\n\n+ Actors: Entities that exchange info with the system\n+ Types:\n    + Humans\n    + Devices\n    + Other software systems\n+ A use case contains a sequence of transactions that exchange the actors and the system whenever a given functionality must be executed\n\n![Captura de pantalla 2017-11-12 a las 20.49.42.png](quiver-image-url/D61E452BAB103036C56367CE219F14DE.png =558x289)\n\n![Captura de pantalla 2017-11-12 a las 20.53.45.png](quiver-image-url/5131BC5C69FCC7B1A691B9FC93EE8DF2.png =587x353)\n![Captura de pantalla 2017-11-12 a las 20.53.49.png](quiver-image-url/F6EB757A04F97AF0238B83644FBF6756.png =593x368)\n\n#### Activity diagrams\n+ Special case of a States diagram where:\n    + All (or most) states are action-ones\n    + All (or most) transitions are triggered by the finalization of actions\n+ The diagram may be associated to a:\n    + Class\n    + Implementation of an operation\n    + A use case"
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    }
  ]
}