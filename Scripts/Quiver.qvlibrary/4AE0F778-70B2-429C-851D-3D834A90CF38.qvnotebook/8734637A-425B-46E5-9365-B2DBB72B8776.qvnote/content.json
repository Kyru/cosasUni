{
  "title": "Unit 3 - Part I",
  "cells": [
    {
      "type": "markdown",
      "data": "### Why functional programming matters? \n**Many programming languages are borrowing typical functional programming features:**\n+ Higher order\n+ Lambda abstractions \n+ Map \n+ Partial applications\n+ Closures\n\n### Distinctive features\n+ Absence of side effects\n+ Functions as first-class citizens\n+ User defined types and datastructures\n+ Partial Application\n+ Evaluation Strategies\n\n### No side effects - Functions\nAbsence of side effects; functions as first-class citizens\n+ Absence of side effects\n    + `the outcome of a function depends on its arguments *only* (referential transparency) `\n+ Functions as first-class citizens\n    + `Functions can be arguments of other functions (higher-order) or returned as the outcome of a function call (for instance, by means of a partial application)` "
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "-- higher-order example, being map and sqr two functions (sqr argument of map) \nmap sqr [1,2,3]\n[1,4,9]\n\n-- partial application example, (Int -> Int) \nmap (inc 1) [1,2,3] -- we can see that this is also a higher-order example\n[2,3,4]\n\ninc :: Int -> (Int -> Int) \ninc x = (x +) "
    },
    {
      "type": "markdown",
      "data": "### Partial Application of functions\nEvery function f: D<sub>1</sub> x D<sub>2</sub> x … x D<sub>k</sub> -> E\ncan be presented in *curied* version as follows:\nf': D<sub>1</sub> -> (D<sub>2</sub> ->( … -> (D<sub>k</sub> -> E) … )\n`where each value in D<sub>1</sub> is given a function of (k-1) arguments (and so on and so forth) \n\n**Currying** enables the partial application of functions to their arguments "
    },
    {
      "type": "markdown",
      "data": "### Partial aplication of functions\n+ In the partial application of a curried function the number of *passed* parameters is *smaller* than the number of *formal* parameters in its definition"
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "-- Example: aritmetic operators\n(+) :: Int -> Int -> Int    --the function + is defined like this \n$(2 +) 5\n7 \n\n-- Example: functions defined as partial applications \nadd_2 :: (Int -> Int) \nadd_2 = (2 +)\n$ add_2 5\n7"
    },
    {
      "type": "markdown",
      "data": "### Evaluation Strategies\n+ **<u>Lazy evaluation:</u>** arguments are evaluated only if ***necessary***; termination is guaranteed (when possible)\n+ **<u>Eager evaluation:</u>** arguments in a function call are ***all*** evaluated before calling the function "
    },
    {
      "type": "markdown",
      "data": "### Functional types\n+ The type constructor -> builds a functional type out from two given types."
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "-- Example\ntype MyType = (Int -> Int)\nfib :: MyType"
    },
    {
      "type": "markdown",
      "data": "+ In general a<sub>1</sub> -> a<sub>2</sub> -> ... -> a<sub>n</sub> is a functional type whose values are those functions having this type\n    + For instance, function **not** is a value of type **Bool -> Bool**\n    + The type of function (2 +) is **Int -> Int**\n    + The type of function **map** is **(a -> b) -> [a] -> [b]**\n+ The operator -> is right associative:\n    + a -> b -> c *is equivalent* to a -> (b -> c) *and* ***different*** *from* (a -> b) -> c\n+ The functional application operator is left assossiative\n    + f a b *is equivalent to* (f a) b *and* ***different*** *from* f (a b) "
    },
    {
      "type": "markdown",
      "data": "### Algebraic Types"
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "-- Algebraic Type Example \n\ntype Name = String\ntype Position = String\ntype Age = Int\ntype Course = Int \n\ndata Person = Student Age Name Course | \n              Professor Name Position |\n              Director Name\n\nnamePerson :: Person -> Name\nnamePerson (Student e n c) = n \nnamePerson (Professor n c) = n \nnamePerosn (Director n)    = n \n\n: namePerson (Professor \"Albert\" \"Assistant\") \n\"Albert\" \n-- If we execute the function namePerson with those parameters it will return n, which in this case is \"Albert\""
    },
    {
      "type": "markdown",
      "data": "The natural numbers can be defined as follows\n`data Nat = Zero | Suc Nar` *(which is a recursive declaration)* "
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "-- Arithmetic operators over Naturals\n-- ADDITION: \n(+ $) :: Nat -> Nat -> Nat \nx + $ Zero = x\nx + $(Suc y) = Suc(x + $y) \n\n-- MULTIPLICATION \n(* $) :: Nat -> Nat -> Nat \nx * $ Zero = Zero \nx * $(Suc y) = x + $(x*$y) \n\n-- EXAMPLE OF HOW TO WRITE A BINARY TREE \n-- where L = leaf and B = Branch \n\ndata BinTree a = L a | B (Tree a) (Tree a) "
    },
    {
      "type": "markdown",
      "data": "**enumeration**\n+ *simple* => **data** Dia = Dom | Lun | Mar | Mie | Jue | Vie | Sab\n+ *structured* => data Either = Left Bool | Right Char `where Left Bool and Right Char are Data Constructors`\n+ *parametric* => data Either a b = Left a | Right b   `where in \"Either a b\" : a and b are type variables`\n![Captura de pantalla 2016-11-30 a las 20.35.29.png](quiver-image-url/E3BB56A76A016D2F6967ECDE2B906F4A.png)\n`where T is a Type Constructor; a1 and aN are Type Variables; C0 and Cm are Data Constructors`\n\n+ The values of an algebraic data type are expressions containing constructor symbols only\n+ They are obtained by using the type definition as a grammar, so that:\n    + Data Constructos  => Terminal symbols\n    + Type Constructors => nonterminal symbols\n+ Patterns are expressions consisting of constructor symbols and varibales\n    + Patterns represent sets of values. For instance, (Suc n) can be usde to represent the set of positive natural numbers "
    },
    {
      "type": "markdown",
      "data": "### Algebraic Types: Pattern matching\n+ A expression e matches a pattern p *(pattern matching)* if e is an instance of p (by giving values to the variables in p)\n+ Pattern matching is a standard function definition mechanism in functional programs \n+ With pattern matching, functions are defined by describing their outcome for the set of values given by a pattern \n\n**Some functions defined by pattern matching:**"
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "-- Exclusive-or\nexOr :: Bool -> Bool -> Bool \nexOr True y = not y \nexOr False y = y \n\n-- if_then_else\ncond :: Bool -> a -> a -> a\ncond True x y  = x\ncond False x y = y "
    },
    {
      "type": "markdown",
      "data": "### Predifined types (Char) \n+ Are written as follows: \n    + 'a','b','0','\\n',...\n+ Predifined functions for char processing: \n    + ord :: Char -> Int `from character c we get its integer code ord c, ej ord 'b' = 98`\n    + chr :: Int -> Char `form an integer we get the corresponding char, ej char 98 = 'b'`\n+ More functions:\n    + isAlpha, isAlphaNum, isDigit, isUpper :: Char -> Bool \n    + toLower, toUpper :: Char -> Char\n    + putChar :: Char -> IO() "
    },
    {
      "type": "markdown",
      "data": "### Predefined types (tuples) \n+ Tuples consist of (two or more) components of possibly different types. eg: (Int, Char) \n+ Functions for tuples of 2 components (pairs) \n    + fst :: (a,b) -> a\n    + fst (x,y) -> x\n    + snd :: (a,b) -> b \n    + snd (x,y) -> y "
    },
    {
      "type": "markdown",
      "data": "### Predifined types (String) \n**Definition:** type String = [Char]\n+ Char sequences enclosed between double quotes\n+ Compared by using the lexicographic ordering\n+ ` \"Juan\" < \"Juana\" => True || \"Palo\" < \"palo\" => True`\n+ Values of (some) types can be transformed into Strings\n+ `show :: Show a => a -> String ; this gives: show 6 => \"6\"`"
    },
    {
      "type": "markdown",
      "data": "### Predifined types (numbers) \n+ Numeric types: Int, Float\n    + Int: bounded range integers\n    + Float: simple precision floating point real numbers\n+ Haskell supports more numeric types [ Integer (unbounded), Double (double precision), Complex, Rational ]"
    },
    {
      "type": "markdown",
      "data": "### Algebraic types (lists) \nThe predifined type *list* corresponds to a recursive algebraic polymorphic type as follows: \n`data [a] = [] | a : [a]  ; where all a are Type variable, the first ([) and last (]) are Type constructors and symbos [] and : are Data constructors`  \n> Remember the data constructor (:) is right associative"
    },
    {
      "type": "markdown",
      "data": "### List comprehension \nThe notation for list comprehension borrows the usual notation for set-theoretic expressions.\n`[ x*x | x <- [1..5], odd x]`\nwhere: \n+ x*x = expression \n+ [1..5] = aritmetic list \n+ \"x <- [1..5]\" = generator\n+ \"odd x\" = guard \n+ | x <- [1..5], odd x = qualifies\n\n![Captura de pantalla 2016-11-30 a las 21.24.22.png](quiver-image-url/C49BB2C8728B7AB16CEE95CE00A5D833.png)\n\nSemantics of list comprehension: \n[ e | p<sub>1</sub> <- xs<sub>1</sub>, g<sub>1</sub>, ..., p<sub>n</sub> <- xs<sub>n</sub>, g<sub>n</sub> ]\n+ The generators are used from left to right, where the rightmost one is first changed when necessary \n+ The guards are evaluated from left to right \n+ The returned list collects the value which are obtained when e is evaluated with all variables instantiated by the generators provided that all guards are satisfied on them \n`[(x,y) | x <- [1..5], odd x, y <- [x..5, odd y]`\n`Returning values are: [(1,1),(1,3),(1,5),(3,3),(3,5),(5,5)]; because you evaluated the first x which is one then all the list in y until you end the list, after you return to x and look for the next one and repeating with the new values`"
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "-- EXAMPLES: \n\nmap f xs = [f x | x <- xs ]\n\nfilter p xs = [x | x <- xs, p x ]\n\nrepetitions y xs = length [() | x <- xs, y == x ]\n\ndivisors n = [i | i <- [1..n], n `mod` i == 0 ]\n\nisMember y xs = not (null [() | x <- xs, y == x ]"
    },
    {
      "type": "markdown",
      "data": "### Operations on lists \n**Properties of a list**\n+ Length of a list: "
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "length :: [a] -> Int \nlength []     = 0\nlength (x:xs) = 1 + length xs "
    },
    {
      "type": "markdown",
      "data": "+ Empty list: "
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "null :: [a] -> Bool\nnull []     = True\nnull (x:xs) = False"
    },
    {
      "type": "markdown",
      "data": "**Combinations of lists** \n+ Concatenation: "
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "(++) :: [a] -> [a] -> [a]\n[] ++ xs     = xs\n(x:xs) ++ ys = x(xs++ys)"
    },
    {
      "type": "markdown",
      "data": "+ Concatenation with flattening: "
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "concat :: [[a]] -> [a]\nconcat []       = []\nconcat (xs:xss) = xs ++ concat xss "
    },
    {
      "type": "markdown",
      "data": "+ Combination: "
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "zip :: [a] -> [b] -> [(a,b)]\nzip [] xs         = []\nzip (x:xs) []     = []\nzip (x:xs) (y:ys) = (x,y):zip xs ys "
    },
    {
      "type": "markdown",
      "data": "**Componentwise access to a list** \n+ Head of a list: "
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "head :: [a] -> a\nhead (x:xs) = x"
    },
    {
      "type": "markdown",
      "data": "+ Last element of a list: "
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "last :: [a] -> a\nlast [x]    = x\nlast (x:xs) = last xs"
    },
    {
      "type": "markdown",
      "data": "+ Indexed access: "
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "(!!) : [a] -> Int -> a \n(x:xs) !! 0 = x \n(x:xs) !! n = xs !! (n-1) "
    },
    {
      "type": "markdown",
      "data": "+ Sublists of a list: \n    + Beginnig of a list: `init :: [a] -> [a]` ; all but the last element\n    + Tail of a list: `tail :: [a] -> [a]`; all but the first element\n\n> Remember: when you use xs in a recursive function i.e. `example x:xs = x : example xs` . When you use \"example xs\" the `xs` is the **TAIL** of the list, which means, the **REMAINING** elements of the list \n\n+ Ordering a list: (by insertion in an ordered list) "
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "insert x []     = [x]\ninsert x (y:ys) \n        | x <= y    = (x:y:ys)        -- does the same as [x] ++ (y:ys) \n        | otherwise = y : (insert x ys) \n\ninorder [] = []\ninorder (x:xs) = insert x ( inorder xs ) "
    },
    {
      "type": "markdown",
      "data": "**More efficient ordering functions: mergeSort** \n+ Procedure: \n    + Divide a list into two halves\n    + Order each of the two halves\n    + Put together the two ordered halves"
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "mergeSort []  = []\nmergeSort [x] = [x]\nmergeSort xs | size > 0 = merge (mergeSort front) (mergeSort back)  -- defining a function like \"aux\" \n          where\n          size  = length xs `div` 2 \n          front = take size xs\n          back  = drop size xs\n\nmerge :: [Int] -> [Int -> [Int]          \nmerge a@(x:xs) b@(y:ys)                   -- The @ (alias) is basicly to be able to use the char a or the list (x:xs), to\n    | x <= y = x : merge xs b             -- express the same thing, here in \"merge xs b\" is the same as merge xs (y:ys).\n    | otherwise = y : merge a ys          -- This is helpful/efficient in more complex programs where you\nmerge [] ys = ys                          -- have longer functions ( para que no tengas que escribirlas todo el rato )\nmerge xs [] = xs\n          \n-- however this only works if both front and back are smaller than xs "
    },
    {
      "type": "markdown",
      "data": "**Transformation of lists** \n+Reverse "
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "reverse :: [a] -> [a]\nreverse []     = []\nreverse (x:xs) = reverse xs++x"
    },
    {
      "type": "markdown",
      "data": "+ Application of a function to the components of a list: "
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "map :: (a -> b) -> [a] -> [b]  -- elements transformed by f \nmap f [] = []\nmap f (x:xs) = f x : map f xs "
    },
    {
      "type": "markdown",
      "data": "### Coercion \n**Coercion is explicit in Haskell. There are functions that transform some types into others** \nFor example: \n+ Function *show* transforms any predefined type into a string. It can be used to coerce integers into strings\n`show 3 = \"3\"` "
    },
    {
      "type": "markdown",
      "data": "### Genericity \n**A funtion is generic if it has a polymorphic type (i.e. : contains type variables) "
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "-- EXAMPLE \n\neither :: (a -> c) -> (b -> c) -> Either a b -> c\neither f g (Left x)  = f x \neither f g (Right y) = g y "
    },
    {
      "type": "markdown",
      "data": "### Overloading \n**Overloading is implemented in Haskell through the notion of type classes**\n+ Type classes enable the use of parametrization for defining overloade functions for some types which must be included into a type class. Example: \n    + `+ :: Num a => a -> a -> a -> a`\n    + Restricts the use of the addition operator to those types belonging to the class Num. \n+ The **type class** declaration specifies the operations that can be used with any type which has been previously included in (i.e., made an instance of) the class. Example: \n    + `class Eq a where`\n    + `(==),(/=) :: a -> a -> Bool `\n+ The type of overloaded functions includes a reference to the class where the usable types are supposed to be included in advance. Example: \n    + `$ :t (==) `\n    + `== :: Eq a => a -> a -> Bool `\n+ Each *instance* of a class is obtained by providing an specific implementation of the class operations for the targeted type."
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "-- EXAMPLE \n\ndata Nat = Cero | Suc Nat\n      instance Eq Nat where\n      Cero == Cero   = True\n      Suc x == Suc y = x == y       -- (Suc x == Suc y) = ( x == y ) \n      _ == _         = False"
    },
    {
      "type": "markdown",
      "data": "+ Algebraic types can be added to a type class by using a *deriving* clause in the type definition. Example: \n    + `data Bool = False | True deriving (Eq, Ord, Enum)`\n    + The operations are given an implementation on the basis of the syntactic structure of the type definition (for instance, False < True) "
    },
    {
      "type": "markdown",
      "data": "### Some predefined classes\n+ Eq ((==),(/=))\n    + includes all predefined types except IO, (->) \n+ Ord ((<), (<=), (>), (>=), max, min) \n    + includes all predefined types except IO, IOError, (->) \n+ Num ((+),(-),(\\*),negate,abs,signum,...) *(signum returns the sign of the number)*\n    + includes all numeric types (Int, Integer, Float, Double, Ratio) \n+ Show(show,...)\n    + includes all predefined types except IO, (->) "
    },
    {
      "type": "markdown",
      "data": "### Class inheritance\n+ Inheritance can be used to define some classes\n    + Example: Ord is a subclass of Eq that provides a default implementation of <=,>=,> as follows:  "
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "class (Eq a) => Ord a where\n      (<),(<=),(>=),(>) :: a -> a -> Bool \n      x <= y      = (x<y) || (x==y) \n      x >= y      = (x>y) || (x==y) \n      x >  y      = not (x <= y) "
    },
    {
      "type": "markdown",
      "data": "+ Instances of extended classes can be defined using *instance*"
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "-- EXAMPLE\n\ninstance (Eq Nat) => Ord Nat where\nCero  < Suc x  = True\nSuc x < Sux y = x < y\n_ < _         = False"
    },
    {
      "type": "markdown",
      "data": "`Note: the context \"(Eq Nat) =>\" is not necessary because Ord extends Eq, but Eq should be instantiated with Nat before instantiating Ord with Nat`"
    },
    {
      "type": "markdown",
      "data": "### Class instances\n+ Dealing with generic types, we may need contexts (witnessing class membership) for their arguments"
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "-- EXAMPLE\ndata Figure = Circle Float | Rect Float Float deriving (Eq, Ord, Show) "
    },
    {
      "type": "markdown",
      "data": "`float must be an instance of Eq, Ord, Show (and it is prefefined that way)`"
    },
    {
      "type": "code",
      "language": "haskell",
      "data": "-- EXAMPLE \ndata Tree a = Void | Branch a (Tree a)(Tree a) \ninstance (Eq a) => Eq (Tree a) \nVoid              ==                  = True\n(Branch x l1 r1 ) == (Branch y l2 r2) = (x==y) && (l1 == l2) && (r1 == r2) \n_                 == _                = False "
    },
    {
      "type": "markdown",
      "data": "`a must be an instance of Eq so that == (as used in the second equation) is overloaded for values of type a, you must import it with \"deriving\" (I think) `"
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": "> SPACE"
    }
  ]
}